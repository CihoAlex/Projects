/*
 * Cihodaru P.C. Alexandru - 3E1
 */
package com.mycompany.universityresources;

import freemarker.template.Configuration;
import freemarker.template.Template;

import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultComboBoxModel;

import java.io.File;
import java.io.FileWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import static com.mycompany.universityresources.objects.EventType.EVENT_COURSE;
import static com.mycompany.universityresources.objects.EventType.EVENT_LABORATOR;
import static com.mycompany.universityresources.objects.RoomType.ROOM_COMPUTER_LAB;
import static com.mycompany.universityresources.objects.RoomType.ROOM_LECTURE_HALL;
import com.mycompany.universityresources.objects.*;
import com.mycompany.universityresources.algorithms.*;
/**
 * @author alexc
 */
public class MainMenu extends javax.swing.JFrame {

    private Connection con;
    private Problem pb;
    private int insertedRooms;
    private int insertedEvents;
    
    private String frame;//currentFrame
    private String lastFrame;
    private int scheduleID;
   

    /**
     * Creates new form NewJFrame
     */
    public MainMenu() {
        super("University Resources");
        initComponents();   
        this.con = Database.getConnection();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);    
        ChangeFrame("Start");     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();
        jButton11 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        jButton1.setText("New");
        jButton1.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton1.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton2.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Load");
        jButton3.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton3.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Generate Random");
        jButton4.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton4.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton4FocusGained(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Back");
        jButton5.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton5.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextField1.setText("id");
        jTextField1.setMaximumSize(new java.awt.Dimension(22, 21));
        jTextField1.setMinimumSize(new java.awt.Dimension(22, 21));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton6.setText("Search");
        jButton6.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton6.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextField2.setText("name");
        jTextField2.setMaximumSize(new java.awt.Dimension(22, 21));
        jTextField2.setMinimumSize(new java.awt.Dimension(22, 21));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setText("size");
        jTextField3.setMaximumSize(new java.awt.Dimension(22, 21));
        jTextField3.setMinimumSize(new java.awt.Dimension(22, 21));

        jButton7.setText("Insert event");
        jButton7.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton7.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextField4.setText("start");
        jTextField4.setMaximumSize(new java.awt.Dimension(22, 21));
        jTextField4.setMinimumSize(new java.awt.Dimension(22, 21));
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jTextField5.setText("end");
        jTextField5.setMaximumSize(new java.awt.Dimension(22, 21));
        jTextField5.setMinimumSize(new java.awt.Dimension(22, 21));

        jButton8.setText("Insert room");
        jButton8.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton8.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jTextField6.setText("name");
        jTextField6.setMaximumSize(new java.awt.Dimension(22, 21));
        jTextField6.setMinimumSize(new java.awt.Dimension(22, 21));
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jTextField7.setText("capacity");
        jTextField7.setMaximumSize(new java.awt.Dimension(22, 21));
        jTextField7.setMinimumSize(new java.awt.Dimension(22, 21));
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jButton9.setText("Generate");
        jButton9.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton9.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel1.setText("Number of events");

        jLabel2.setText("Number of rooms");

        jButton10.setText("Set");
        jButton10.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton10.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTable1);

        jLabel3.setText("Schedule ID:");

        jCheckBox1.setText("Random");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.setModel(new DefaultComboBoxModel<>(EventType.values()));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new DefaultComboBoxModel<>(RoomType.values()));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton11.setText("Greedy");
        jButton11.setMaximumSize(new java.awt.Dimension(90, 30));
        jButton11.setMinimumSize(new java.awt.Dimension(90, 30));
        jButton11.setPreferredSize(new java.awt.Dimension(130, 28));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox2, 0, 120, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox3, 0, 114, Short.MAX_VALUE)
                            .addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(282, 282, 282)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBox1)
                        .addComponent(jLabel4)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabel4.setVisible(false);
        System.out.println("Am apasat New");
        this.pb = new Problem();
        this.lastFrame = this.frame;
        ChangeFrame("New");
        try {
             Statement stmt = this.con.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT nextval('scheduleid')");              
             this.scheduleID = rs.next() ? rs.getInt(1) : null;
            } catch (SQLException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
                jLabel4.setVisible(true);
                jLabel4.setText(ex.toString());
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jLabel4.setVisible(false);
        try {
            Database.getConnection().commit();
        } catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            jLabel4.setText(ex.toString());
        }
        try {
            Database.getConnection().close();
        } catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            jLabel4.setVisible(true);
            jLabel4.setText(ex.toString());
        }
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jLabel4.setVisible(false);
        System.out.println("am apasat load");
        this.lastFrame = this.frame;
        ChangeFrame("Load");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jLabel4.setVisible(false);
        ChangeFrame(this.lastFrame);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
 
        jTextArea1.setText("");
        jButton11.setVisible(false);
        float startTime = System.nanoTime();
        Runtime runtime = Runtime.getRuntime();
        jLabel4.setVisible(false);
        jLabel4.setText("");
        try {
        jTable1.setVisible(true);
        this.pb = new Problem(this.scheduleID, (int) jSpinner2.getValue(), (int) jSpinner1.getValue());
        SimpleAlgorithm simple = new SimpleAlgorithm(this.pb);
        String[][] occupiedRooms = simple.solve();
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("rooms");
        model.addColumn("8");
        model.addColumn("9");
        model.addColumn("10");
        model.addColumn("11");
        model.addColumn("12");
        model.addColumn("13");
        model.addColumn("14");
        model.addColumn("15");
        model.addColumn("16");
        model.addColumn("17");
        model.addColumn("18");
        model.addColumn("19");
        model.addColumn("20");
        String[] row = new String[19];
        for (int i = 0; i < occupiedRooms.length; i++) {
            for (int j = 0; j < occupiedRooms[0].length; j++) {
                if (j == 0)
                    row[j] = this.pb.rooms[i].getName();
                if (j > 7)
                    row[j - 7] = occupiedRooms[i][j];
            }
            model.addRow(row);
        }
        jTable1.setModel(model);
        jLabel3.setVisible(true);
        jLabel3.setText("Schedule ID: " + this.scheduleID);
        jButton4.setVisible(false);
        
        Solution sol = new Solution(occupiedRooms, this.scheduleID, this.pb);
        for (int i = 0; i < pb.events.length; i++) {
            if (!pb.events[i].getIsAssigned().equals("true")) {
                jTextArea1.setVisible(true);
                jTextArea1.append(pb.events[i] + " doesn't have room\n");
            }
        }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            jLabel4.setVisible(true);
            jLabel4.setText(ex.toString());
        }
        
        Map<String,Object> map = new HashMap<>();
        
        map.put("ev", this.pb.events);
        map.put("ro", this.pb.rooms);
        map.put("schedule",this.scheduleID);
        Configuration cfg = new Configuration();
        try {
            cfg.setDirectoryForTemplateLoading(new File("src\\main\\resources\\templates"));
            Template template = cfg.getTemplate("events_rooms.ftl");
            
            try (Writer fileWriter = new FileWriter(new File("output.html"))) {
                template.process(map, fileWriter);
            } 
        } catch (Exception ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            jLabel4.setVisible(true);
            jLabel4.setText(ex.toString());
        }
        
        float endTime = System.nanoTime();
        float totalTime = (endTime - startTime);
        System.out.println("The program had a total running time of " + totalTime / 1000000000 + " seconds");
        long memory =runtime.totalMemory() - runtime.freeMemory();
        System.out.println(memory);
        ChangeFrame("After generate");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton4FocusGained
    }//GEN-LAST:event_jButton4FocusGained
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        jLabel4.setVisible(false);
        jTextArea1.setText("");
        System.out.println("Am apasat search");
        String text = jTextField1.getText();
        LinkedList<String>  assignedEvents = new LinkedList();
        try {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("rooms");
        model.addColumn("8");
        model.addColumn("9");
        model.addColumn("10");
        model.addColumn("11");
        model.addColumn("12");
        model.addColumn("13");
        model.addColumn("14");
        model.addColumn("15");
        model.addColumn("16");
        model.addColumn("17");
        model.addColumn("18");
        model.addColumn("19");
        model.addColumn("20");
        jTable1.setVisible(true);
        String[] row = new String[19];
        Connection con = Database.getConnection();
        
        try (Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(
                "SELECT eventname, eventsize, eventstart, eventend, room, roomcapacity, time from public.schedules where schedules.schedule = " + text + " order by room")) {
            
            while (rs.next()) {
                assignedEvents.add(rs.getString(1));
                if (row[0] == null) {
                    row[0] = rs.getString(5);
                    row[rs.getInt(7) - 7] = rs.getString(1);
                } else if ((rs.getString(5)).equals(row[0])) {
                     row[rs.getInt(7) - 7] = rs.getString(1);
                } else {
                    model.addRow(row);
                    row = new String[19];
                    row[0] = rs.getString(5);
                    row[rs.getInt(7) - 7] = rs.getString(1);
                }
            }
            model.addRow(row);
            jTable1.setModel(model);
        }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            jLabel4.setVisible(true);
            jLabel4.setText(ex.toString());
        }
        try (Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(
        "SELECT name from public.events where events.scheduleid = " + text)) {
        while(rs.next()) {
            if (!assignedEvents.contains(rs.getString(1))) {
                jTextArea1.setVisible(true);
                jTextArea1.append(rs.getString(1)+ " doesn't have room!\n");
            }
        }
        }
         catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            jLabel4.setVisible(true);
            jLabel4.setText(ex.toString());
        }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        jLabel4.setVisible(false);
        try {
            if (Integer.parseInt(jTextField3.getText()) > 0) {
                if (Integer.parseInt(jTextField4.getText()) > 7 && Integer.parseInt(jTextField4.getText()) < 21) {   
                    if (Integer.parseInt(jTextField5.getText()) > Integer.parseInt(jTextField4.getText())) {
                        if (jComboBox1.getSelectedItem() == EVENT_COURSE) {
                            if (jComboBox5.getSelectedItem()=="without video projector")
                                this.pb.events[this.insertedEvents] = new Course(jTextField2.getText(),Integer.parseInt(jTextField3.getText()), Integer.parseInt(jTextField4.getText()),Integer.parseInt(jTextField5.getText()), this.scheduleID,0);
                            else if(jComboBox5.getSelectedItem()=="with video projector")
                                this.pb.events[this.insertedEvents] = new Course(jTextField2.getText(),Integer.parseInt(jTextField3.getText()), Integer.parseInt(jTextField4.getText()),Integer.parseInt(jTextField5.getText()), this.scheduleID,1);
                        } else if (jComboBox1.getSelectedItem() == EVENT_LABORATOR) {
                            if(jComboBox5.getSelectedItem() == "Windows")
                                this.pb.events[this.insertedEvents] = new Laborator(jTextField2.getText(),Integer.parseInt(jTextField3.getText()), Integer.parseInt(jTextField4.getText()),Integer.parseInt(jTextField5.getText()), this.scheduleID, 1);
                            else if(jComboBox5.getSelectedItem() == "Linux")
                                this.pb.events[this.insertedEvents] = new Laborator(jTextField2.getText(),Integer.parseInt(jTextField3.getText()), Integer.parseInt(jTextField4.getText()),Integer.parseInt(jTextField5.getText()), this.scheduleID, 0);
                        }
                        this.insertedEvents++;
                        System.out.println("am inserat event");
                        jLabel1.setText("Events left to insert: "+(this.pb.countEvents-this.insertedEvents));
                    } else { 
                        Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, "End Time must be greater than start time");
                        jLabel4.setVisible(true);
                        jLabel4.setText("End Time must be greater than start time");}
                } else {
                    Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, "Start time must be between 7 and 21");
                    jLabel4.setVisible(true);
                    jLabel4.setText("End Time must be greater than start time");}
            } else { 
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, "Size of event must be greater than 0");
                jLabel4.setVisible(true);
                jLabel4.setText("Size of event must be greater than 0");
            }
        } catch (SQLException ex) {
            jLabel4.setVisible(true);
            jLabel4.setText(ex.toString());
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
    }//GEN-LAST:event_jTextField4ActionPerformed
    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
    }//GEN-LAST:event_jTextField6ActionPerformed
    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        jLabel4.setVisible(false);
        try {
            if (Integer.parseInt(jTextField7.getText()) > 0) {
                if (jComboBox2.getSelectedItem() == ROOM_COMPUTER_LAB) {
                    if (jComboBox3.getSelectedItem() == "Linux") {
                        this.pb.rooms[this.insertedRooms] = new ComputerLab(jTextField6.getText(),Integer.parseInt(jTextField7.getText()), this.scheduleID,"Linux");
                    } else if (jComboBox3.getSelectedItem() == "Windows") {
                        this.pb.rooms[this.insertedRooms] = new ComputerLab(jTextField6.getText(),Integer.parseInt(jTextField7.getText()), this.scheduleID,"Windows");
                    }
                } else if (jComboBox2.getSelectedItem() == ROOM_LECTURE_HALL) {
                    if (jComboBox3.getSelectedItem() == "with video projector") {
                        this.pb.rooms[this.insertedRooms] = new LectureHall(jTextField6.getText(),Integer.parseInt(jTextField7.getText()), this.scheduleID,true);
                    } else if (jComboBox3.getSelectedItem() == "without video projector") {
                        this.pb.rooms[this.insertedRooms] = new LectureHall(jTextField6.getText(),Integer.parseInt(jTextField7.getText()), this.scheduleID,false);
                    }
                }
                this.insertedRooms++;
                jLabel2.setText("Rooms left to insert: "+(this.pb.countRooms - this.insertedRooms));

            System.out.println("Am inserat room");}
            else { 
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, "capacity of room must be greater than 0");
                jLabel4.setVisible(true);
                jLabel4.setText("capacity of room must be greater than 0");
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            jLabel4.setVisible(true);
            jLabel4.setText(ex.toString());
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jLabel4.setVisible(false);  
        jButton11.setVisible(false);
        if (this.pb.countRooms-this.insertedRooms == 0 && this.pb.countEvents - this.insertedEvents == 0){
        
            jLabel4.setText("");
            SimpleAlgorithm simple = new SimpleAlgorithm(this.pb);
            jTable1.setVisible(true);
            //Solution sol = new Solution(simple.solve(), this.scheduleID, this.pb);
            
            String[][] occupiedRooms = simple.solve();
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("rooms");
            model.addColumn("8");
            model.addColumn("9");
            model.addColumn("10");
            model.addColumn("11");
            model.addColumn("12");
            model.addColumn("13");
            model.addColumn("14");
            model.addColumn("15");
            model.addColumn("16");
            model.addColumn("17");
            model.addColumn("18");
            model.addColumn("19");
            model.addColumn("20");
            String[] row = new String[19];
            for (int i = 0; i < occupiedRooms.length; i++) {
                for (int j = 0; j < occupiedRooms[0].length; j++) {
                    if (j == 0)
                        row[j] = this.pb.rooms[i].getName();
                    if (j > 7)
                        row[j - 7] = occupiedRooms[i][j];
                }
                model.addRow(row);
            }
            jTable1.setModel(model);
            jLabel3.setVisible(true);
            jLabel3.setText("Schedule ID: " + this.scheduleID);
            jButton9.setVisible(false);
            for (int i = 0; i < pb.events.length; i++) {
                if (!pb.events[i].getIsAssigned().equals("true")) {
                jTextArea1.setVisible(true);
                jTextArea1.append(pb.events[i] + " doesn't have room\n");
                }
            }
            
            
        } else { 
            jLabel4.setVisible(true);
            jLabel4.setText("You must insert all events and rooms");
        }
        ChangeFrame("After generate");
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        jLabel4.setVisible(false);
        if ( (int) jSpinner1.getValue() > 0 && (int) jSpinner2.getValue() > 0) {
            this.pb.countEvents = (int) jSpinner1.getValue();
            this.pb.countRooms = (int) jSpinner2.getValue();
            this.pb.events = new Event[this.pb.countEvents];
            this.pb.rooms = new Room[this.pb.countRooms];
            this.insertedRooms = 0;
            this.insertedEvents = 0;
            
            if (jCheckBox1.isSelected()) {
                jButton4.setVisible(true);
                jButton7.setVisible(false);
                jButton8.setVisible(false);
                jButton11.setVisible(true);
                jTextField2.setVisible(false);
                jTextField3.setVisible(false);
                jTextField4.setVisible(false);
                jTextField5.setVisible(false);
                jTextField6.setVisible(false);
                jTextField7.setVisible(false);
                jLabel1.setVisible(false);
                jLabel2.setVisible(false);
            } else {
                jButton9.setVisible(true);
                jButton7.setVisible(true);
                jButton8.setVisible(true);
                jButton11.setVisible(true);
                jTextField2.setVisible(true);
                jTextField3.setVisible(true);
                jTextField4.setVisible(true);
                jTextField5.setVisible(true);
                jTextField6.setVisible(true);
                jTextField7.setVisible(true);
                jLabel1.setVisible(true);
                jLabel2.setVisible(true);
                jLabel1.setText("Events left to insert: " + (this.pb.countEvents - this.insertedEvents));
                jLabel2.setText("Rooms left to insert: " + (this.pb.countRooms - this.insertedRooms));
                jComboBox1.setVisible(true);
                jComboBox2.setVisible(true);
                jComboBox3.setVisible(true);
                jComboBox5.setVisible(true);
                if (jComboBox2.getSelectedItem() == ROOM_COMPUTER_LAB) {
                    jComboBox3.removeAllItems();
                    jComboBox3.addItem("Windows");
                    jComboBox3.addItem("Linux");
                } else if (jComboBox2.getSelectedItem() == ROOM_LECTURE_HALL) {
                    jComboBox3.removeAllItems();
                    jComboBox3.addItem("with video projector");
                    jComboBox3.addItem("without video projector");
                }
                if (jComboBox1.getSelectedItem() == EVENT_COURSE) {
                    jComboBox5.removeAllItems();
                    jComboBox5.addItem("with video projector");
                    jComboBox5.addItem("without video projector");
                } else if (jComboBox1.getSelectedItem() == EVENT_LABORATOR) {
                    jComboBox5.removeAllItems();
                    jComboBox5.addItem("Windows");
                    jComboBox5.addItem("Linux");
                }
            }
            jCheckBox1.setVisible(false);
            jSpinner1.setVisible(false);
            jSpinner2.setVisible(false);
            jButton10.setVisible(false);
        } else {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, "Number of events and rooms must pe positive");
            jLabel4.setVisible(true);
            jLabel4.setText("Number of events and rooms must pe positive");
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        if (jComboBox2.getSelectedItem() == ROOM_COMPUTER_LAB) {
            jComboBox3.removeAllItems();
            jComboBox3.addItem("Windows");
            jComboBox3.addItem("Linux");
        } else if (jComboBox2.getSelectedItem() == ROOM_LECTURE_HALL) {
            jComboBox3.removeAllItems();
            jComboBox3.addItem("with video projector");
            jComboBox3.addItem("without video projector");
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedItem() == EVENT_LABORATOR) {
            jComboBox5.removeAllItems();
            jComboBox5.addItem("Windows");
            jComboBox5.addItem("Linux");
        } else if (jComboBox1.getSelectedItem() == EVENT_COURSE) {
            jComboBox5.removeAllItems();
            jComboBox5.addItem("with video projector");
            jComboBox5.addItem("without video projector");
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
    }//GEN-LAST:event_formComponentHidden

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        if (jCheckBox1.isSelected()) {
            jTextArea1.setText("");
            jButton11.setVisible(false);
            float startTime = System.nanoTime();
            Runtime runtime = Runtime.getRuntime();

            jLabel4.setVisible(false);
            jLabel4.setText("");
            try {
                jTable1.setVisible(true);
                this.pb = new Problem(this.scheduleID, (int) jSpinner2.getValue(), (int) jSpinner1.getValue());
                GreedyAlgorithm greedy = new GreedyAlgorithm(this.pb);
                String[][] occupiedRooms = greedy.solve();
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("rooms");
                model.addColumn("8");
                model.addColumn("9");
                model.addColumn("10");
                model.addColumn("11");
                model.addColumn("12");
                model.addColumn("13");
                model.addColumn("14");
                model.addColumn("15");
                model.addColumn("16");
                model.addColumn("17");
                model.addColumn("18");
                model.addColumn("19");
                model.addColumn("20");
                String[] row = new String[19];
                for (int i = 0; i < occupiedRooms.length; i++) {
                    for (int j = 0; j < occupiedRooms[0].length; j++) {
                        if (j == 0)
                        row[j] = this.pb.rooms[i].getName();
                        if (j > 7)
                        row[j - 7] = occupiedRooms[i][j];
                    }
                    model.addRow(row);
                }
                jTable1.setModel(model);
                jLabel3.setVisible(true);
                jLabel3.setText("Schedule ID: " + this.scheduleID);
                jButton4.setVisible(false);

                Solution sol = new Solution(occupiedRooms, this.scheduleID, this.pb);
                for (int i = 0; i < pb.events.length; i++) {
                    if (!pb.events[i].getIsAssigned().equals("true")) {
                        jTextArea1.setVisible(true);
                        jTextArea1.append(pb.events[i] + " doesn't have room\n");
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
                jLabel4.setVisible(true);
                jLabel4.setText(ex.toString());
            }

            Map<String,Object> map = new HashMap<>();

            map.put("ev", this.pb.events);
            map.put("ro", this.pb.rooms);
            map.put("schedule",this.scheduleID);
            Configuration cfg = new Configuration();
            try {
                cfg.setDirectoryForTemplateLoading(new File("src\\main\\resources\\templates"));
                Template template = cfg.getTemplate("events_rooms.ftl");

                try (Writer fileWriter = new FileWriter(new File("output.html"))) {
                    template.process(map, fileWriter);
                }
            } catch (Exception ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
                jLabel4.setVisible(true);
                jLabel4.setText(ex.toString());
            }

            float endTime = System.nanoTime();
            float totalTime = endTime - startTime ;

            System.out.println("The program had a total running time of " + totalTime /1000000000+ " seconds");
             long memory =runtime.totalMemory() - runtime.freeMemory();
             System.out.println(memory);
        } else {
            jLabel4.setVisible(false);
            jButton11.setVisible(false);
            if (this.pb.countRooms-this.insertedRooms == 0 && this.pb.countEvents - this.insertedEvents == 0){

                jLabel4.setText("");
                GreedyAlgorithm greedy = new GreedyAlgorithm(this.pb);
                jTable1.setVisible(true);

                String[][] occupiedRooms = greedy.solve();
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("rooms");
                model.addColumn("8");
                model.addColumn("9");
                model.addColumn("10");
                model.addColumn("11");
                model.addColumn("12");
                model.addColumn("13");
                model.addColumn("14");
                model.addColumn("15");
                model.addColumn("16");
                model.addColumn("17");
                model.addColumn("18");
                model.addColumn("19");
                model.addColumn("20");
                String[] row = new String[19];
                for (int i = 0; i < occupiedRooms.length; i++) {
                    for (int j = 0; j < occupiedRooms[0].length; j++) {
                        if (j == 0)
                        row[j] = this.pb.rooms[i].getName();
                        if (j > 7)
                        row[j - 7] = occupiedRooms[i][j];
                    }
                    model.addRow(row);
                }
                jTable1.setModel(model);
                jLabel3.setVisible(true);
                jLabel3.setText("Schedule ID: " + this.scheduleID);
                jButton9.setVisible(false);
                for (int i = 0; i < pb.events.length; i++) {
                    if (!pb.events[i].getIsAssigned().equals("true")) {
                        jTextArea1.setVisible(true);
                        jTextArea1.append(pb.events[i] + " doesn't have room\n");
                    }
                }

            } else {
                jLabel4.setVisible(true);
                jLabel4.setText("You must insert all events and rooms");
            }
        }
        ChangeFrame("After generate");

    }//GEN-LAST:event_jButton11ActionPerformed

    private void ChangeFrame(String name) {
        switch(name) {
            case "Start":
            this.frame = "Start";
            jButton1.setVisible(true);
            jButton2.setVisible(true);
            jButton3.setVisible(true);
            jButton4.setVisible(false);
            jButton5.setVisible(false);
            jButton6.setVisible(false);
            jButton7.setVisible(false);
            jButton8.setVisible(false);
            jButton9.setVisible(false);
            jButton10.setVisible(false);
            jButton11.setVisible(false);
            
            jLabel1.setVisible(false);
            jLabel2.setVisible(false);
            jLabel3.setVisible(false);
            jLabel4.setVisible(false);
            
            jSpinner1.setVisible(false);
            jSpinner2.setVisible(false);
            
            jTextField1.setVisible(false);
            jTextField2.setVisible(false);
            jTextField3.setVisible(false);
            jTextField4.setVisible(false);
            jTextField5.setVisible(false);
            jTextField6.setVisible(false);
            jTextField7.setVisible(false);
            
            jTable1.setVisible(false);
            
            jCheckBox1.setVisible(false);
            
            jTextArea1.setVisible(false);
            
            jComboBox1.setVisible(false);
            jComboBox2.setVisible(false);
            jComboBox3.setVisible(false);
            jComboBox5.setVisible(false);
            break;
        case "New":
            this.frame = "New";
            jButton1.setVisible(false);
            jButton2.setVisible(true);
            jButton3.setVisible(false);
            jButton4.setVisible(false);
            jButton5.setVisible(true);
            jButton6.setVisible(false);
            jButton7.setVisible(false);
            jButton8.setVisible(false);
            jButton9.setVisible(false);
            jButton10.setVisible(true);
            jButton11.setVisible(false);
            
            jSpinner1.setVisible(true);
            jSpinner2.setVisible(true)
                    ;
            jLabel1.setVisible(true);
            jLabel2.setVisible(true);
            jLabel1.setText("Number of events");
            jLabel2.setText("Number of rooms");
            jTable1.setVisible(false);
            jLabel3.setVisible(false);
            jLabel4.setVisible(false);
            
            jTextField1.setVisible(false);
            jTextField2.setVisible(false);
            jTextField3.setVisible(false);
            jTextField4.setVisible(false);
            jTextField5.setVisible(false);
            jTextField6.setVisible(false);
            jTextField7.setVisible(false);
            
            jCheckBox1.setVisible(true);
            
            jTextArea1.setVisible(false);
            
            jComboBox1.setVisible(false);
            jComboBox2.setVisible(false);
            jComboBox3.setVisible(false);
            jComboBox5.setVisible(false);
            break;
        case "Load":
            
            jButton1.setVisible(false);
            jButton2.setVisible(true);
            jButton3.setVisible(false);
            jButton4.setVisible(false);
            jButton5.setVisible(true);
            jButton6.setVisible(true);
            jButton7.setVisible(false);
            jButton8.setVisible(false);
            jButton8.setVisible(false);
            jButton10.setVisible(false);
            jButton11.setVisible(false);
            
            jSpinner1.setVisible(false);
            jSpinner2.setVisible(false);
            
            jLabel1.setVisible(false);
            jLabel2.setVisible(false);
            jLabel3.setVisible(false);
            jLabel4.setVisible(false);
            
            jTextField1.setVisible(true);
            jTextField2.setVisible(false);
            jTextField3.setVisible(false);
            jTextField4.setVisible(false);
            jTextField5.setVisible(false);
            jTextField6.setVisible(false);
            jTextField7.setVisible(false);
            
            jTable1.setVisible(false);
            
            jCheckBox1.setVisible(false);
            
            jTextArea1.setVisible(false);
            
            jComboBox1.setVisible(false);
            jComboBox2.setVisible(false);
            jComboBox3.setVisible(false);
            jComboBox5.setVisible(false);
            
            break;
        case "After generate":
            jButton7.setVisible(false);
            jButton8.setVisible(false);
            jButton9.setVisible(false);
            jButton11.setVisible(false);
            jTextField1.setVisible(false);
            jTextField2.setVisible(false);
            jTextField3.setVisible(false);
            jTextField4.setVisible(false);
            jTextField5.setVisible(false);
            jTextField6.setVisible(false);
            jTextField7.setVisible(false);
            jComboBox1.setVisible(false);
            jComboBox2.setVisible(false);
            jComboBox3.setVisible(false);
            jComboBox5.setVisible(false);
            jSpinner1.setVisible(false);
            jSpinner2.setVisible(false);
            jLabel1.setVisible(false);
            jLabel2.setVisible(false);
            break;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<EventType> jComboBox1;
    private javax.swing.JComboBox<RoomType> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}
